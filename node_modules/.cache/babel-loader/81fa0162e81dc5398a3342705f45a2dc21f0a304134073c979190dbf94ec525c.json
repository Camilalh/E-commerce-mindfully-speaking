{"ast":null,"code":"var _jsxFileName = \"/Users/camilalasheraspuerta/Documents/CODERHOUSE-REACT PRACTICA/e-commerce/src/pages/main/index.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport ButtonCustom from \"../../components/button\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Main = () => {\n  _s();\n  const [inputValue, setInputValue] = React.useState(\"\"); // HOOK. primero pongo el estado, despues el metodo que actualiza el estado y por ultimo el valor inicial.\n\n  const handleClick = () => {\n    alert(\"apretaste\" + inputValue);\n  };\n  const handleValue = event => {\n    console.log(event);\n  };\n  return (\n    /*#__PURE__*/\n    //el return siempre tiene que estar encapsulado dentro de las <> </>\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contenedor\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Esto es una mierda\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ButtonCustom, {\n        handleClick: handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  );\n};\n_s(Main, \"iEYviHCJXqr/rxvP+SpzgvyJcbo=\");\n_c = Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","ButtonCustom","jsxDEV","_jsxDEV","Fragment","_Fragment","Main","_s","inputValue","setInputValue","useState","handleClick","alert","handleValue","event","console","log","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onChange","_c","$RefreshReg$"],"sources":["/Users/camilalasheraspuerta/Documents/CODERHOUSE-REACT PRACTICA/e-commerce/src/pages/main/index.jsx"],"sourcesContent":["import React from \"react\";\nimport ButtonCustom from \"../../components/button\";\nimport \"./index.css\";\n\nexport const Main = () => {\n    const [inputValue, setInputValue] = React.useState(\"\"); // HOOK. primero pongo el estado, despues el metodo que actualiza el estado y por ultimo el valor inicial.\n\n    const handleClick = () => {\n        alert(\"apretaste\" + inputValue);\n    };\n\n    const handleValue = (event) => {\n        console.log(event);\n    };\n\n    return (\n        //el return siempre tiene que estar encapsulado dentro de las <> </>\n        <>\n            <div className=\"contenedor\">\n                <p>Esto es una mierda</p>\n            </div>\n            <ButtonCustom handleClick={handleClick}></ButtonCustom>\n            <input onChange={handleValue}></input>\n        </>\n    );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAErB,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,KAAK,CAACU,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExD,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtBC,KAAK,CAAC,WAAW,GAAGJ,UAAU,CAAC;EACnC,CAAC;EAED,MAAMK,WAAW,GAAIC,KAAK,IAAK;IAC3BC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB,CAAC;EAED;IAAA;IACI;IACAX,OAAA,CAAAE,SAAA;MAAAY,QAAA,gBACId,OAAA;QAAKe,SAAS,EAAC,YAAY;QAAAD,QAAA,eACvBd,OAAA;UAAAc,QAAA,EAAG;QAAkB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eACNnB,OAAA,CAACF,YAAY;QAACU,WAAW,EAAEA;MAAY;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe,CAAC,eACvDnB,OAAA;QAAOoB,QAAQ,EAAEV;MAAY;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,eACxC;EAAC;AAEX,CAAC;AAACf,EAAA,CArBWD,IAAI;AAAAkB,EAAA,GAAJlB,IAAI;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}